import csv
from pathlib import Path
from sqlalchemy import create_engine, select
from sqlalchemy.orm import Session

from db.database import Case, Court, Stage, Base

DB_PATH = "sqlite:///./cases.db"

def read_case_numbers_from_csv(csv_path: Path) -> set[str]:
    case_numbers = set()
    with open(csv_path, encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            number = row.get("case_number")
            if number:
                case_numbers.add(number.strip())
    return case_numbers

def search_cases(csv_path: Path):
    engine = create_engine(DB_PATH, echo=False)
    session = Session(engine)

    case_numbers = read_case_numbers_from_csv(csv_path)
    if not case_numbers:
        print("‚ö†Ô∏è –ù–µ–º–∞—î –Ω–æ–º–µ—Ä—ñ–≤ —Å–ø—Ä–∞–≤ —É CSV.")
        return

    print(f"üîç –ü–æ—à—É–∫ {len(case_numbers)} —Å–ø—Ä–∞–≤ —É –±–∞–∑—ñ...")
    stmt = select(Case).where(Case.case_number.in_(case_numbers)).join(Court).join(Stage)

    results = session.execute(stmt).scalars().all()

    if not results:
        print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥—ñ–≤.")
        return

    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} –∑–±—ñ–≥(—ñ–≤):")
    for case in results:
        print(f"üìÅ {case.case_number} | –°—É–¥: {case.court.name} | –°—Ç–∞–¥—ñ—è: {case.stage.name} | –î–∞—Ç–∞: {case.date}")
